// token types
export const _TYPE_BLANK_TOKEN: string = '$BLANK_TOKEN_____';
export const _TYPE_BAD_TOKEN: string = '$BAD_TOKEN_____';
export const _TYPE_INVALID_INPUT: string = '$INVALID_INPUT_____';
export const _TYPE_EOF_TOKEN: string = '$EOF_TOKEN_____';
export const _TYPE_WHITESPACE_TOKEN: string = '$WHITESPACE_TOKEN_____';
export const _TYPE_HTML_TOKEN: string = '$HTML_TOKEN_____';
export const _TYPE_INJECTION_TOKEN: string = '$INJECT_TOKEN_____';
export const _TYPE_CONTENT_TOKEN: string = '$CONTENT_TOKEN_____';
export const _TYPE_CONTROL_GENERIC_TOKEN: string = '$CONTROL_GENERIC_TOKEN_____';
export const _TYPE_CONTROL_IF_TOKEN: string = '$CONTROL_TYPE_IF_TOKEN_____';
export const _TYPE_CONTROL_FOR_TOKEN: string = '$CONTROL_TYPE_FOR_TOKEN_____';
export const _TYPE_CONTROL_IMPORT_TOKEN: string = '$CONTROL_TYPE_IMPORT_TOKEN_____';
export const _TYPE_CONTROL_COMPONENT_TOKEN: string = '$CONTROL_TYPE_CONTROL_TOKEN_____';
export const _TYPE_CONTROL_PROPS_TOKEN: string = '$CONTROL_TYPE_PROPS_TOKEN_____';

export const _TOKEN_TYPES_MAP: { [key: string]: string } = {
    BLANK: _TYPE_BLANK_TOKEN,
    BAD: _TYPE_BAD_TOKEN,
    INVALID: _TYPE_INVALID_INPUT,
    EOF: _TYPE_EOF_TOKEN,
    WHITESPACE: _TYPE_WHITESPACE_TOKEN,
    HTML: _TYPE_HTML_TOKEN,
    INJECTION: _TYPE_INJECTION_TOKEN,
    GENERIC: _TYPE_CONTROL_GENERIC_TOKEN,
    CONTENT: _TYPE_CONTENT_TOKEN,
    IF: _TYPE_CONTROL_IF_TOKEN,
    FOR: _TYPE_CONTROL_FOR_TOKEN,
    IMPORT: _TYPE_CONTROL_IMPORT_TOKEN,
    COMPONENT: _TYPE_CONTROL_COMPONENT_TOKEN,
    PROPS: _TYPE_CONTROL_PROPS_TOKEN,
}

// token names
export const _INTERMEDIATE_CONTENT: string = '$INTERMEDIATE_CONTENT$_';
export const _WHITESPACE_CONTENT: string = '$WHITESPACE_CONTENT$_';
export const _INVALID_TOKEN_NAME: string = '$INVALID_TOKEN_NAME$_';
export const _CONTROLIF_IF_TOKEN: string = '$CONTROL_IF_TOKEN_____';
export const _CONTROLIF_ELSEIF_TOKEN: string = '$CONTROL_ELSEIF_TOKEN_____';
export const _CONTROLIF_ELSE_TOKEN: string = '$CONTROL_ELSE_TOKEN_____';
export const _CONTROLIF_ENDIF_TOKEN: string = '$CONTROL_ENDIF_TOKEN_____';
export const _CONTROLFOR_FOR_TOKEN: string = '$CONTROL_FORSTART_TOKEN_____';
export const _CONTROLFOR_ENDFOR_TOKEN: string = '$CONTROL_ENDFOR_TOKEN_____';
export const _CONTROL_IMPORT_TOKEN: string = '$CONTROL_IMPORT_TOKEN';
export const _CONTROL_COMPONENT_TOKEN: string = '$CONTROL_COMPONENT_TOKEN_____';
export const _CONTROL_PROPS_TOKEN: string = '$CONTROL_PROPS_TOKEN_____';
export const _CONTROL_TOKEN_SUFFIX: string = '$CONTROL_';

export const _TOKEN_NAMES_MAP: { [key: string]: string } = {
    IF: _CONTROLIF_IF_TOKEN,
    ELSEIF: _CONTROLIF_ELSEIF_TOKEN,
    ELSE: _CONTROLIF_ELSE_TOKEN,
    ENDIF: _CONTROLIF_ENDIF_TOKEN,
    FOR: _CONTROLFOR_FOR_TOKEN,
    ENDFOR: _CONTROLFOR_ENDFOR_TOKEN,
    IMPORT: _CONTROL_IMPORT_TOKEN,
    COMPONENT: _CONTROL_COMPONENT_TOKEN,
    PROPS: _CONTROL_PROPS_TOKEN,
    CONTENT: _INTERMEDIATE_CONTENT,
    WHITESPACE: _WHITESPACE_CONTENT,
    INVALID: _INVALID_TOKEN_NAME
}

export const _ALL_TOKEN_TYPES: Array<string> = [
    _TYPE_BLANK_TOKEN
    , _TYPE_BAD_TOKEN
    , _TYPE_INVALID_INPUT
    , _TYPE_EOF_TOKEN
    , _TYPE_WHITESPACE_TOKEN
    , _TYPE_HTML_TOKEN
    , _TYPE_INJECTION_TOKEN
    , _TYPE_CONTENT_TOKEN
    , _TYPE_CONTROL_GENERIC_TOKEN
    , _TYPE_CONTROL_IF_TOKEN
    , _TYPE_CONTROL_FOR_TOKEN
    , _TYPE_CONTROL_IMPORT_TOKEN
    , _TYPE_CONTROL_COMPONENT_TOKEN
    , _TYPE_CONTROL_PROPS_TOKEN
];

export const _SUPPORTED_TOKE_TYPES: Array<string> = [ 
    _TYPE_HTML_TOKEN
    , _TYPE_CONTROL_GENERIC_TOKEN
    , _TYPE_INJECTION_TOKEN
    , _TYPE_CONTENT_TOKEN
    , _TYPE_CONTROL_IMPORT_TOKEN

 ];

export const _ALL_CONTROL_TOKEN_NAMES: Array<string> = [
    , _CONTROLIF_IF_TOKEN
    , _CONTROLIF_ELSEIF_TOKEN
    , _CONTROLIF_ELSE_TOKEN
    , _CONTROLIF_ENDIF_TOKEN
    , _CONTROLFOR_FOR_TOKEN
    , _CONTROLFOR_ENDFOR_TOKEN
    , _CONTROL_IMPORT_TOKEN
] as Array<string>;

export const _CONTROL_NAME_MAP: {[key: string]: string} = {
    IF: _CONTROLIF_ENDIF_TOKEN,
    ELSEIF: _CONTROLIF_ENDIF_TOKEN,
    ELSE: _CONTROLIF_ENDIF_TOKEN,
    ENDIF: _CONTROLIF_ENDIF_TOKEN,
    FOR: _CONTROLFOR_ENDFOR_TOKEN,
    ENDFOR: _CONTROLFOR_ENDFOR_TOKEN,
    IMPORT: _CONTROL_IMPORT_TOKEN,
    PROPS: _CONTROL_PROPS_TOKEN,
    COMPONENT: _CONTROL_COMPONENT_TOKEN
}